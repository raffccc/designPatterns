*** Intent ***
	- Encapsulate a request as an object, thereby letting you parameterize clients with different requests,
	queue or log requests, and support undoable operations
	
*** Applicability ***
	- Parameterize objects by an action to perform. Commands are an object-oriented replacement for callbacks
	- Specify, queue and execute requests at different times.
	- Support undo. Command's execute operation can store state for reversing its effects in the
	command itself, the command interface must have an added Unexecute operation.
	- Support logging changes so that they can be reapplied in case of a system crash. Augmenting
	the command interface with load and store operations.
	- Structure a system aroud high-level operations built on primitives operations. Such a structure
	is common in information systems that support transactions.
	
*** Consequences ***
	- Command decouples the object that invokes the operation from the one that knows how to perform it
	- Commands are first-class objects. They can be manipulated and extended like any other object
	- You can assemble commands into a composite command.
	- It's easy to add new Commands, because you don't have to change existing classes. 
	
	
*** Implementation ***
	- The client is the one who configures the commands
	- The invoker stores the ConcreteCommand object
	- Invoker issues a request by calling execute on the command. When commands are undoable, ConcreteCommand 
	stores state for undoing the command prior to invoking execute.
	- How intelligent should a command be? Two extremes:
		1) It merely defines a binding between a receiver and the actions that carry out the request
		2) Implements everything itself without delegating to a receiver at all. When is it useful?
			- You want to define commands that are independent of existing classes
			- No suitable receiver exists
			- Command knows its receiver implicitly
		3) In between these extremes are commands that have enough knowledge to find their receiver dynamically
		
