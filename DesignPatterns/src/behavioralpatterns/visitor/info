*** Intent ***
	- Represent an operation to be performed on the elements of an object structure. Visitor
	lets you define a new operation without changing the classes of the elements on which it
	operates.
	
*** Applicability ***
	- Object structure contains many classes of objects with differing interfaces, and you want to perform
	operations on these objects that depend on their concrete classes
	
	- Many distinct and unrelated operations need to be performed on objects in an object structure,
	and you want to avoid polluting their classes with these operations. Visitor lets you keep
	related operations together by defining them in one class. When the object structure is shared by
	many applications, use Visitor to put operations in just those applications that need them.
	
	- Classes defining the object structure rarely change, but you often want to define new operations over
	the structure. Changing the object structure classes requires redefining the interface to all visitors,
	which is potentially costly. If the object structure classes changes often, then it's probably better to
	define the operations in those classes.
	
*** Consequences ***
	- Visitor makes adding new operations easy
	- A visitor gathers related operations and separates unrelated ones
	- Adding new ConcreteElement classes is hard
	- Visiting across class hierarchies: Visitor can visit objects that don't have a common parent class,
	you can add any type of object to a Visitor interface
	- Accumulating state: They can accumulate state as they visit each element in the object
	structure. Without a visitor, this state would be passed as extra arguments to the operations
	that perform the traversal, or they might appear as global variables.
	- Breaking encapsulation: This pattern forces you to provide public operations that
	access an element's internal state.
	
*** Implementation ***
	- Who is responsible for traversing the object structure?
		- 3 places are candidates: Object structure, visitor or in a separate iterator object
		- Often the object structure is responsible for iteration
		- If you put the traversal in the visitor, you will end up duplicating the traversal code
		in each ConcreteVisitor. The main reason to put the traversal strategy in the visitor is
		to implement a particularly complex traversal.